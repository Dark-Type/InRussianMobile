/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.AdminCreatedResponse
import org.openapitools.client.models.Badge
import org.openapitools.client.models.CountStats
import org.openapitools.client.models.Course
import org.openapitools.client.models.CourseProgressItem
import org.openapitools.client.models.CreateCourseRequest
import org.openapitools.client.models.CreateReportRequest
import org.openapitools.client.models.CreateSectionRequest
import org.openapitools.client.models.CreateStaffProfileRequest
import org.openapitools.client.models.CreateTaskAnswerOptionRequest
import org.openapitools.client.models.CreateTaskAnswerRequest
import org.openapitools.client.models.CreateTaskContentRequest
import org.openapitools.client.models.CreateTaskQueueRequest
import org.openapitools.client.models.CreateTaskRequest
import org.openapitools.client.models.CreateThemeRequest
import org.openapitools.client.models.CreateUserProfileRequest
import org.openapitools.client.models.ErrorResponse
import org.openapitools.client.models.LoginRequest
import org.openapitools.client.models.LoginResponse
import org.openapitools.client.models.MediaFileMeta
import org.openapitools.client.models.MessageResponse
import org.openapitools.client.models.OverallCourseStatisticsResponse
import org.openapitools.client.models.OverallStatisticsResponse
import org.openapitools.client.models.RefreshTokenRequest
import org.openapitools.client.models.Report
import org.openapitools.client.models.Section
import org.openapitools.client.models.SectionProgressItem
import org.openapitools.client.models.StaffProfileResponse
import org.openapitools.client.models.StaffRegisterRequest
import org.openapitools.client.models.StudentRegisterRequest
import org.openapitools.client.models.TaskAnswerItem
import org.openapitools.client.models.TaskAnswerOptionItem
import org.openapitools.client.models.TaskContentItem
import org.openapitools.client.models.TaskWithDetails
import org.openapitools.client.models.Theme
import org.openapitools.client.models.UpdateCourseRequest
import org.openapitools.client.models.UpdateSectionRequest
import org.openapitools.client.models.UpdateStaffProfileRequest
import org.openapitools.client.models.UpdateTaskAnswerOptionRequest
import org.openapitools.client.models.UpdateTaskAnswerRequest
import org.openapitools.client.models.UpdateTaskContentRequest
import org.openapitools.client.models.UpdateTaskProgressRequest
import org.openapitools.client.models.UpdateTaskRequest
import org.openapitools.client.models.UpdateThemeRequest
import org.openapitools.client.models.UpdateUserProfileRequest
import org.openapitools.client.models.UpdateUserRequest
import org.openapitools.client.models.User
import org.openapitools.client.models.UserCourseEnrollmentItem
import org.openapitools.client.models.UserInfoResponse
import org.openapitools.client.models.UserLanguageSkillRequest
import org.openapitools.client.models.UserProfileResponse
import org.openapitools.client.models.UserTaskProgressItem
import org.openapitools.client.models.UserTaskQueueItem

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class DefaultApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * 
     * 
     * @param courseId 
     * @return OverallCourseStatisticsResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun adminStatisticsCourseCourseIdGet(courseId: kotlin.String): HttpResponse<OverallCourseStatisticsResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/statistics/course/{courseId}".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @return OverallStatisticsResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun adminStatisticsOverallGet(): HttpResponse<OverallStatisticsResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/statistics/overall",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param courseId 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun adminStatisticsStudentsCourseCourseIdGet(courseId: kotlin.String): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/statistics/students/course/{courseId}".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun adminStatisticsStudentsOverallGet(): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/statistics/students/overall",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param role  (optional)
     * @param createdFrom  (optional)
     * @param createdTo  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun adminUsersCountGet(role: kotlin.String? = null, createdFrom: kotlin.String? = null, createdTo: kotlin.String? = null): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        role?.apply { localVariableQuery["role"] = listOf("$role") }
        createdFrom?.apply { localVariableQuery["createdFrom"] = listOf("$createdFrom") }
        createdTo?.apply { localVariableQuery["createdTo"] = listOf("$createdTo") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/users/count",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param page  (optional)
     * @param size  (optional)
     * @param role  (optional)
     * @param sortBy  (optional)
     * @param sortOrder  (optional)
     * @param createdFrom  (optional)
     * @param createdTo  (optional)
     * @return kotlin.collections.List<User>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun adminUsersGet(page: kotlin.Int? = null, size: kotlin.Int? = null, role: kotlin.String? = null, sortBy: kotlin.String? = null, sortOrder: kotlin.String? = null, createdFrom: kotlin.String? = null, createdTo: kotlin.String? = null): HttpResponse<kotlin.collections.List<User>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        size?.apply { localVariableQuery["size"] = listOf("$size") }
        role?.apply { localVariableQuery["role"] = listOf("$role") }
        sortBy?.apply { localVariableQuery["sortBy"] = listOf("$sortBy") }
        sortOrder?.apply { localVariableQuery["sortOrder"] = listOf("$sortOrder") }
        createdFrom?.apply { localVariableQuery["createdFrom"] = listOf("$createdFrom") }
        createdTo?.apply { localVariableQuery["createdTo"] = listOf("$createdTo") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<AdminUsersGetResponse>().map { value }
    }

    @Serializable(AdminUsersGetResponse.Companion::class)
    private class AdminUsersGetResponse(val value: List<User>) {
        companion object : KSerializer<AdminUsersGetResponse> {
            private val serializer: KSerializer<List<User>> = serializer<List<User>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: AdminUsersGetResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = AdminUsersGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 
     * 
     * @param staffRegisterRequest 
     * @return LoginResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun adminUsersStaffPost(staffRegisterRequest: StaffRegisterRequest): HttpResponse<LoginResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = staffRegisterRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/admin/users/staff",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * TODO(\&quot;fix authenticate for &#x60;content-jwt&#x60;\&quot;)
     * @param userId 
     * @return User
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun adminUsersUserIdGet(userId: kotlin.String): HttpResponse<User> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/admin/users/{userId}".replace("{" + "userId" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * get(\&quot;/{userId}\&quot;) { &lt;br&gt; val userId &#x3D; call.parameters[\&quot;userId\&quot;] &lt;br&gt; if (userId &#x3D;&#x3D; null) { &lt;br&gt; call.respond( &lt;br&gt; HttpStatusCode.BadRequest, &lt;br&gt; ErrorResponse( &lt;br&gt; success &#x3D; false, &lt;br&gt; error &#x3D; \&quot;Missing user ID\&quot;, &lt;br&gt; code &#x3D; null, &lt;br&gt; timestamp &#x3D; System.currentTimeMillis() &lt;br&gt; ) &lt;br&gt; ) &lt;br&gt; return@get &lt;br&gt; } &lt;br&gt; val result &#x3D; adminService.getUserById(userId) &lt;br&gt; if (result.isSuccess) { &lt;br&gt; call.respond(HttpStatusCode.OK, result.getOrNull()!!) &lt;br&gt; } else { &lt;br&gt; call.respond( &lt;br&gt; HttpStatusCode.NotFound, &lt;br&gt; ErrorResponse( &lt;br&gt; success &#x3D; false, &lt;br&gt; error &#x3D; result.exceptionOrNull()?.message ?: \&quot;User not found\&quot;, &lt;br&gt; code &#x3D; null, &lt;br&gt; timestamp &#x3D; System.currentTimeMillis() &lt;br&gt; ) &lt;br&gt; ) &lt;br&gt; } &lt;br&gt; }
     * @param userId 
     * @param body 
     * @return MessageResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun adminUsersUserIdStatusPut(userId: kotlin.String, body: kotlin.String): HttpResponse<MessageResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = body

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/admin/users/{userId}/status".replace("{" + "userId" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @return AdminCreatedResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun authAdminCreateInitialPost(): HttpResponse<AdminCreatedResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/auth/admin/create-initial",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param loginRequest 
     * @return LoginResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun authLoginPost(loginRequest: LoginRequest): HttpResponse<LoginResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = loginRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/auth/login",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @return MessageResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun authLogoutPost(): HttpResponse<MessageResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/auth/logout",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @return UserInfoResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun authMeGet(): HttpResponse<UserInfoResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/auth/me",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param refreshTokenRequest 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun authRefreshPost(refreshTokenRequest: RefreshTokenRequest): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = refreshTokenRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/auth/refresh",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param staffRegisterRequest 
     * @return LoginResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun authStaffRegisterPost(staffRegisterRequest: StaffRegisterRequest): HttpResponse<LoginResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = staffRegisterRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/auth/staff/register",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param studentRegisterRequest 
     * @return LoginResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun authStudentRegisterPost(studentRegisterRequest: StudentRegisterRequest): HttpResponse<LoginResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = studentRegisterRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/auth/student/register",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param courseId 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentCoursesCourseIdDelete(courseId: kotlin.String): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/content/courses/{courseId}".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param courseId 
     * @return Course
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentCoursesCourseIdGet(courseId: kotlin.String): HttpResponse<Course> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/content/courses/{courseId}".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param courseId 
     * @param updateCourseRequest 
     * @return Course
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentCoursesCourseIdPut(courseId: kotlin.String, updateCourseRequest: UpdateCourseRequest): HttpResponse<Course> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateCourseRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/content/courses/{courseId}".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @return kotlin.collections.List<Course>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentCoursesGet(): HttpResponse<kotlin.collections.List<Course>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/content/courses",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ContentCoursesGetResponse>().map { value }
    }

    @Serializable(ContentCoursesGetResponse.Companion::class)
    private class ContentCoursesGetResponse(val value: List<Course>) {
        companion object : KSerializer<ContentCoursesGetResponse> {
            private val serializer: KSerializer<List<Course>> = serializer<List<Course>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: ContentCoursesGetResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = ContentCoursesGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 
     * 
     * @param createCourseRequest 
     * @return Course
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentCoursesPost(createCourseRequest: CreateCourseRequest): HttpResponse<Course> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createCourseRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/content/courses",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @return kotlin.collections.List<Report>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentReportsGet(): HttpResponse<kotlin.collections.List<Report>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/content/reports",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ContentReportsGetResponse>().map { value }
    }

    @Serializable(ContentReportsGetResponse.Companion::class)
    private class ContentReportsGetResponse(val value: List<Report>) {
        companion object : KSerializer<ContentReportsGetResponse> {
            private val serializer: KSerializer<List<Report>> = serializer<List<Report>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: ContentReportsGetResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = ContentReportsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 
     * 
     * @param createReportRequest 
     * @return Report
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentReportsPost(createReportRequest: CreateReportRequest): HttpResponse<Report> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createReportRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/content/reports",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param reportId 
     * @return Report
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentReportsReportIdGet(reportId: kotlin.String): HttpResponse<Report> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/content/reports/{reportId}".replace("{" + "reportId" + "}", "$reportId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param courseId 
     * @return kotlin.collections.List<Section>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentSectionsByCourseCourseIdGet(courseId: kotlin.String): HttpResponse<kotlin.collections.List<Section>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/content/sections/by-course/{courseId}".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ContentSectionsByCourseCourseIdGetResponse>().map { value }
    }

    @Serializable(ContentSectionsByCourseCourseIdGetResponse.Companion::class)
    private class ContentSectionsByCourseCourseIdGetResponse(val value: List<Section>) {
        companion object : KSerializer<ContentSectionsByCourseCourseIdGetResponse> {
            private val serializer: KSerializer<List<Section>> = serializer<List<Section>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: ContentSectionsByCourseCourseIdGetResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = ContentSectionsByCourseCourseIdGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 
     * 
     * @param createSectionRequest 
     * @return Section
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentSectionsPost(createSectionRequest: CreateSectionRequest): HttpResponse<Section> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createSectionRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/content/sections",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param sectionId 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentSectionsSectionIdDelete(sectionId: kotlin.String): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/content/sections/{sectionId}".replace("{" + "sectionId" + "}", "$sectionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param sectionId 
     * @return Section
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentSectionsSectionIdGet(sectionId: kotlin.String): HttpResponse<Section> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/content/sections/{sectionId}".replace("{" + "sectionId" + "}", "$sectionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param sectionId 
     * @param updateSectionRequest 
     * @return Section
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentSectionsSectionIdPut(sectionId: kotlin.String, updateSectionRequest: UpdateSectionRequest): HttpResponse<Section> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateSectionRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/content/sections/{sectionId}".replace("{" + "sectionId" + "}", "$sectionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param courseId 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentStatsCourseCourseIdTasksCountGet(courseId: kotlin.String): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/content/stats/course/{courseId}/tasks-count".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @return CountStats
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentStatsGet(): HttpResponse<CountStats> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/content/stats",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param sectionId 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentStatsSectionSectionIdTasksCountGet(sectionId: kotlin.String): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/content/stats/section/{sectionId}/tasks-count".replace("{" + "sectionId" + "}", "$sectionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param themeId 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentStatsThemeThemeIdTasksCountGet(themeId: kotlin.String): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/content/stats/theme/{themeId}/tasks-count".replace("{" + "themeId" + "}", "$themeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param createTaskRequest 
     * @return TaskWithDetails
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksPost(createTaskRequest: CreateTaskRequest): HttpResponse<TaskWithDetails> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createTaskRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/content/tasks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param taskId 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdAnswerDelete(taskId: kotlin.String): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/content/tasks/{taskId}/answer".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param taskId 
     * @return TaskAnswerItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdAnswerGet(taskId: kotlin.String): HttpResponse<TaskAnswerItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/content/tasks/{taskId}/answer".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param taskId 
     * @param createTaskAnswerRequest 
     * @return TaskAnswerItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdAnswerPost(taskId: kotlin.String, createTaskAnswerRequest: CreateTaskAnswerRequest): HttpResponse<TaskAnswerItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createTaskAnswerRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/content/tasks/{taskId}/answer".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param taskId 
     * @param updateTaskAnswerRequest 
     * @return TaskAnswerItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdAnswerPut(taskId: kotlin.String, updateTaskAnswerRequest: UpdateTaskAnswerRequest): HttpResponse<TaskAnswerItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateTaskAnswerRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/content/tasks/{taskId}/answer".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param contentId 
     * @param taskId 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdContentContentIdDelete(contentId: kotlin.String, taskId: kotlin.String): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/content/tasks/{taskId}/content/{contentId}".replace("{" + "contentId" + "}", "$contentId").replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param contentId 
     * @param taskId 
     * @return TaskContentItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdContentContentIdGet(contentId: kotlin.String, taskId: kotlin.String): HttpResponse<TaskContentItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/content/tasks/{taskId}/content/{contentId}".replace("{" + "contentId" + "}", "$contentId").replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param contentId 
     * @param taskId 
     * @param updateTaskContentRequest 
     * @return TaskContentItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdContentContentIdPut(contentId: kotlin.String, taskId: kotlin.String, updateTaskContentRequest: UpdateTaskContentRequest): HttpResponse<TaskContentItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateTaskContentRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/content/tasks/{taskId}/content/{contentId}".replace("{" + "contentId" + "}", "$contentId").replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param taskId 
     * @param createTaskContentRequest 
     * @return TaskContentItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdContentPost(taskId: kotlin.String, createTaskContentRequest: CreateTaskContentRequest): HttpResponse<TaskContentItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createTaskContentRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/content/tasks/{taskId}/content".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param taskId 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdDelete(taskId: kotlin.String): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/content/tasks/{taskId}".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * TODO(\&quot;fix authenticate for &#x60;content-jwt&#x60;\&quot;)
     * @param taskId 
     * @return TaskWithDetails
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdGet(taskId: kotlin.String): HttpResponse<TaskWithDetails> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/content/tasks/{taskId}".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param optionId 
     * @param taskId 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdOptionsOptionIdDelete(optionId: kotlin.String, taskId: kotlin.String): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/content/tasks/{taskId}/options/{optionId}".replace("{" + "optionId" + "}", "$optionId").replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param optionId 
     * @param taskId 
     * @return TaskAnswerOptionItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdOptionsOptionIdGet(optionId: kotlin.String, taskId: kotlin.String): HttpResponse<TaskAnswerOptionItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/content/tasks/{taskId}/options/{optionId}".replace("{" + "optionId" + "}", "$optionId").replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param optionId 
     * @param taskId 
     * @param updateTaskAnswerOptionRequest 
     * @return TaskAnswerOptionItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdOptionsOptionIdPut(optionId: kotlin.String, taskId: kotlin.String, updateTaskAnswerOptionRequest: UpdateTaskAnswerOptionRequest): HttpResponse<TaskAnswerOptionItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateTaskAnswerOptionRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/content/tasks/{taskId}/options/{optionId}".replace("{" + "optionId" + "}", "$optionId").replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param taskId 
     * @param createTaskAnswerOptionRequest 
     * @return TaskAnswerOptionItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdOptionsPost(taskId: kotlin.String, createTaskAnswerOptionRequest: CreateTaskAnswerOptionRequest): HttpResponse<TaskAnswerOptionItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createTaskAnswerOptionRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/content/tasks/{taskId}/options".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param taskId 
     * @param updateTaskRequest 
     * @return TaskWithDetails
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdPut(taskId: kotlin.String, updateTaskRequest: UpdateTaskRequest): HttpResponse<TaskWithDetails> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateTaskRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/content/tasks/{taskId}".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param sectionId 
     * @return kotlin.collections.List<Theme>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentThemesBySectionSectionIdGet(sectionId: kotlin.String): HttpResponse<kotlin.collections.List<Theme>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/content/themes/by-section/{sectionId}".replace("{" + "sectionId" + "}", "$sectionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ContentThemesBySectionSectionIdGetResponse>().map { value }
    }

    @Serializable(ContentThemesBySectionSectionIdGetResponse.Companion::class)
    private class ContentThemesBySectionSectionIdGetResponse(val value: List<Theme>) {
        companion object : KSerializer<ContentThemesBySectionSectionIdGetResponse> {
            private val serializer: KSerializer<List<Theme>> = serializer<List<Theme>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: ContentThemesBySectionSectionIdGetResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = ContentThemesBySectionSectionIdGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 
     * 
     * @param createThemeRequest 
     * @return Theme
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentThemesPost(createThemeRequest: CreateThemeRequest): HttpResponse<Theme> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createThemeRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/content/themes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param themeId 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentThemesThemeIdDelete(themeId: kotlin.String): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/content/themes/{themeId}".replace("{" + "themeId" + "}", "$themeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param themeId 
     * @return Theme
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentThemesThemeIdGet(themeId: kotlin.String): HttpResponse<Theme> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/content/themes/{themeId}".replace("{" + "themeId" + "}", "$themeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param themeId 
     * @param updateThemeRequest 
     * @return Theme
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentThemesThemeIdPut(themeId: kotlin.String, updateThemeRequest: UpdateThemeRequest): HttpResponse<Theme> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateThemeRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/content/themes/{themeId}".replace("{" + "themeId" + "}", "$themeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param themeId 
     * @return kotlin.collections.List<TaskWithDetails>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentThemesThemeIdTasksGet(themeId: kotlin.String): HttpResponse<kotlin.collections.List<TaskWithDetails>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/content/themes/{themeId}/tasks".replace("{" + "themeId" + "}", "$themeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ContentThemesThemeIdTasksGetResponse>().map { value }
    }

    @Serializable(ContentThemesThemeIdTasksGetResponse.Companion::class)
    private class ContentThemesThemeIdTasksGetResponse(val value: List<TaskWithDetails>) {
        companion object : KSerializer<ContentThemesThemeIdTasksGetResponse> {
            private val serializer: KSerializer<List<TaskWithDetails>> = serializer<List<TaskWithDetails>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: ContentThemesThemeIdTasksGetResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = ContentThemesThemeIdTasksGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 
     * 
     * @param courseId 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun expertStatisticsCourseCourseIdAverageProgressGet(courseId: kotlin.String): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/expert/statistics/course/{courseId}/average-progress".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param courseId 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun expertStatisticsCourseCourseIdAverageTimeGet(courseId: kotlin.String): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/expert/statistics/course/{courseId}/average-time".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param courseId 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun expertStatisticsCourseCourseIdStudentsCountGet(courseId: kotlin.String): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/expert/statistics/course/{courseId}/students-count".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun expertStatisticsOverallAverageProgressGet(): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/expert/statistics/overall-average-progress",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun expertStatisticsOverallAverageTimeGet(): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/expert/statistics/overall-average-time",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun expertStatisticsStudentsOverallGet(): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/expert/statistics/students/overall",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param createdFrom  (optional)
     * @param createdTo  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun expertStudentsCountGet(createdFrom: kotlin.String? = null, createdTo: kotlin.String? = null): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        createdFrom?.apply { localVariableQuery["createdFrom"] = listOf("$createdFrom") }
        createdTo?.apply { localVariableQuery["createdTo"] = listOf("$createdTo") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/expert/students/count",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param page  (optional)
     * @param size  (optional)
     * @param sortBy  (optional)
     * @param sortOrder  (optional)
     * @param createdFrom  (optional)
     * @param createdTo  (optional)
     * @return kotlin.collections.List<User>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun expertStudentsGet(page: kotlin.Int? = null, size: kotlin.Int? = null, sortBy: kotlin.String? = null, sortOrder: kotlin.String? = null, createdFrom: kotlin.String? = null, createdTo: kotlin.String? = null): HttpResponse<kotlin.collections.List<User>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        size?.apply { localVariableQuery["size"] = listOf("$size") }
        sortBy?.apply { localVariableQuery["sortBy"] = listOf("$sortBy") }
        sortOrder?.apply { localVariableQuery["sortOrder"] = listOf("$sortOrder") }
        createdFrom?.apply { localVariableQuery["createdFrom"] = listOf("$createdFrom") }
        createdTo?.apply { localVariableQuery["createdTo"] = listOf("$createdTo") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/expert/students",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ExpertStudentsGetResponse>().map { value }
    }

    @Serializable(ExpertStudentsGetResponse.Companion::class)
    private class ExpertStudentsGetResponse(val value: List<User>) {
        companion object : KSerializer<ExpertStudentsGetResponse> {
            private val serializer: KSerializer<List<User>> = serializer<List<User>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: ExpertStudentsGetResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = ExpertStudentsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 
     * 
     * @param mediaId 
     * @param userId  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun mediaMediaIdDelete(mediaId: kotlin.String, userId: kotlin.String? = null): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        userId?.apply { localVariableQuery["userId"] = listOf("$userId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/media/{mediaId}".replace("{" + "mediaId" + "}", "$mediaId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param mediaId 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun mediaMediaIdGet(mediaId: kotlin.String): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/media/{mediaId}".replace("{" + "mediaId" + "}", "$mediaId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param mediaId 
     * @param userId  (optional)
     * @return MediaFileMeta
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun mediaMediaIdPut(mediaId: kotlin.String, userId: kotlin.String? = null): HttpResponse<MediaFileMeta> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        userId?.apply { localVariableQuery["userId"] = listOf("$userId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/media/{mediaId}".replace("{" + "mediaId" + "}", "$mediaId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param userId  (optional)
     * @return MediaFileMeta
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun mediaUploadPost(userId: kotlin.String? = null): HttpResponse<MediaFileMeta> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        userId?.apply { localVariableQuery["userId"] = listOf("$userId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/media/upload",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param userId 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesAvatarUserIdGet(userId: kotlin.String): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/profiles/avatar/{userId}".replace("{" + "userId" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @return StaffProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesStaffGet(): HttpResponse<StaffProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/profiles/staff",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param id 
     * @return StaffProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesStaffIdGet(id: kotlin.String): HttpResponse<StaffProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/profiles/staff/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param id 
     * @param updateStaffProfileRequest 
     * @return StaffProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesStaffIdPut(id: kotlin.String, updateStaffProfileRequest: UpdateStaffProfileRequest): HttpResponse<StaffProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateStaffProfileRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/profiles/staff/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param createStaffProfileRequest 
     * @param targetUserId  (optional)
     * @return StaffProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesStaffPost(createStaffProfileRequest: CreateStaffProfileRequest, targetUserId: kotlin.String? = null): HttpResponse<StaffProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createStaffProfileRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        targetUserId?.apply { localVariableQuery["targetUserId"] = listOf("$targetUserId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/profiles/staff",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param updateStaffProfileRequest 
     * @return StaffProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesStaffPut(updateStaffProfileRequest: UpdateStaffProfileRequest): HttpResponse<StaffProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateStaffProfileRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/profiles/staff",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param updateUserRequest 
     * @param targetUserId  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserBasePut(updateUserRequest: UpdateUserRequest, targetUserId: kotlin.String? = null): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateUserRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        targetUserId?.apply { localVariableQuery["targetUserId"] = listOf("$targetUserId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/profiles/user/base",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @return UserProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserGet(): HttpResponse<UserProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/profiles/user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param id 
     * @return UserProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserIdGet(id: kotlin.String): HttpResponse<UserProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/profiles/user/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param id 
     * @param updateUserProfileRequest 
     * @return UserProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserIdPut(id: kotlin.String, updateUserProfileRequest: UpdateUserProfileRequest): HttpResponse<UserProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateUserProfileRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/profiles/user/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param targetUserId  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserLanguageSkillsGet(targetUserId: kotlin.String? = null): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        targetUserId?.apply { localVariableQuery["targetUserId"] = listOf("$targetUserId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/profiles/user/language-skills",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param userLanguageSkillRequest 
     * @param targetUserId  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserLanguageSkillsPost(userLanguageSkillRequest: UserLanguageSkillRequest, targetUserId: kotlin.String? = null): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = userLanguageSkillRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        targetUserId?.apply { localVariableQuery["targetUserId"] = listOf("$targetUserId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/profiles/user/language-skills",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param skillId 
     * @param targetUserId  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserLanguageSkillsSkillIdDelete(skillId: kotlin.String, targetUserId: kotlin.String? = null): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        targetUserId?.apply { localVariableQuery["targetUserId"] = listOf("$targetUserId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/profiles/user/language-skills/{skillId}".replace("{" + "skillId" + "}", "$skillId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param skillId 
     * @param userLanguageSkillRequest 
     * @param targetUserId  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserLanguageSkillsSkillIdPut(skillId: kotlin.String, userLanguageSkillRequest: UserLanguageSkillRequest, targetUserId: kotlin.String? = null): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = userLanguageSkillRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        targetUserId?.apply { localVariableQuery["targetUserId"] = listOf("$targetUserId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/profiles/user/language-skills/{skillId}".replace("{" + "skillId" + "}", "$skillId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param createUserProfileRequest 
     * @param targetUserId  (optional)
     * @return UserProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserPost(createUserProfileRequest: CreateUserProfileRequest, targetUserId: kotlin.String? = null): HttpResponse<UserProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createUserProfileRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        targetUserId?.apply { localVariableQuery["targetUserId"] = listOf("$targetUserId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/profiles/user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param updateUserProfileRequest 
     * @return UserProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserPut(updateUserProfileRequest: UpdateUserProfileRequest): HttpResponse<UserProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateUserProfileRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/profiles/user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @return kotlin.collections.List<Badge>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentBadgesGet(): HttpResponse<kotlin.collections.List<Badge>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/student/badges",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<StudentBadgesGetResponse>().map { value }
    }

    @Serializable(StudentBadgesGetResponse.Companion::class)
    private class StudentBadgesGetResponse(val value: List<Badge>) {
        companion object : KSerializer<StudentBadgesGetResponse> {
            private val serializer: KSerializer<List<Badge>> = serializer<List<Badge>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: StudentBadgesGetResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = StudentBadgesGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 
     * 
     * @param body 
     * @return kotlin.Boolean
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentBadgesPost(body: kotlin.String): HttpResponse<kotlin.Boolean> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = body

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/student/badges",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param courseId 
     * @return kotlin.Boolean
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentCoursesCourseIdEnrollDelete(courseId: kotlin.String): HttpResponse<kotlin.Boolean> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/student/courses/{courseId}/enroll".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param courseId 
     * @return kotlin.Boolean
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentCoursesCourseIdEnrollPost(courseId: kotlin.String): HttpResponse<kotlin.Boolean> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/student/courses/{courseId}/enroll".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param courseId 
     * @return CourseProgressItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentCoursesCourseIdProgressGet(courseId: kotlin.String): HttpResponse<CourseProgressItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/student/courses/{courseId}/progress".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @return kotlin.collections.List<Course>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentCoursesGet(): HttpResponse<kotlin.collections.List<Course>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/student/courses",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<StudentCoursesGetResponse>().map { value }
    }

    @Serializable(StudentCoursesGetResponse.Companion::class)
    private class StudentCoursesGetResponse(val value: List<Course>) {
        companion object : KSerializer<StudentCoursesGetResponse> {
            private val serializer: KSerializer<List<Course>> = serializer<List<Course>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: StudentCoursesGetResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = StudentCoursesGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 
     * 
     * @return kotlin.collections.List<UserCourseEnrollmentItem>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentEnrollmentsGet(): HttpResponse<kotlin.collections.List<UserCourseEnrollmentItem>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/student/enrollments",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<StudentEnrollmentsGetResponse>().map { value }
    }

    @Serializable(StudentEnrollmentsGetResponse.Companion::class)
    private class StudentEnrollmentsGetResponse(val value: List<UserCourseEnrollmentItem>) {
        companion object : KSerializer<StudentEnrollmentsGetResponse> {
            private val serializer: KSerializer<List<UserCourseEnrollmentItem>> = serializer<List<UserCourseEnrollmentItem>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: StudentEnrollmentsGetResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = StudentEnrollmentsGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 
     * 
     * @param sectionId 
     * @return SectionProgressItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentSectionsSectionIdProgressGet(sectionId: kotlin.String): HttpResponse<SectionProgressItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/student/sections/{sectionId}/progress".replace("{" + "sectionId" + "}", "$sectionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @return kotlin.collections.List<UserTaskQueueItem>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTaskQueueGet(): HttpResponse<kotlin.collections.List<UserTaskQueueItem>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/student/task-queue",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<StudentTaskQueueGetResponse>().map { value }
    }

    @Serializable(StudentTaskQueueGetResponse.Companion::class)
    private class StudentTaskQueueGetResponse(val value: List<UserTaskQueueItem>) {
        companion object : KSerializer<StudentTaskQueueGetResponse> {
            private val serializer: KSerializer<List<UserTaskQueueItem>> = serializer<List<UserTaskQueueItem>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: StudentTaskQueueGetResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = StudentTaskQueueGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * 
     * 
     * @return UserTaskQueueItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTaskQueueNextGet(): HttpResponse<UserTaskQueueItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/student/task-queue/next",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param createTaskQueueRequest 
     * @return UserTaskQueueItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTaskQueuePost(createTaskQueueRequest: CreateTaskQueueRequest): HttpResponse<UserTaskQueueItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createTaskQueueRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/student/task-queue",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param queueId 
     * @return kotlin.Boolean
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTaskQueueQueueIdDelete(queueId: kotlin.String): HttpResponse<kotlin.Boolean> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/student/task-queue/{queueId}".replace("{" + "queueId" + "}", "$queueId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param queueId 
     * @param body 
     * @return kotlin.Boolean
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTaskQueueQueueIdPositionPatch(queueId: kotlin.String, body: kotlin.String): HttpResponse<kotlin.Boolean> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = body

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/student/task-queue/{queueId}/position".replace("{" + "queueId" + "}", "$queueId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param taskId 
     * @return TaskAnswerItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTasksTaskIdAnswerGet(taskId: kotlin.String): HttpResponse<TaskAnswerItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/student/tasks/{taskId}/answer".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param taskId 
     * @param body 
     * @return UserTaskProgressItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTasksTaskIdCompletePost(taskId: kotlin.String, body: kotlin.String): HttpResponse<UserTaskProgressItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = body

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/student/tasks/{taskId}/complete".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param taskId 
     * @return UserTaskProgressItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTasksTaskIdProgressGet(taskId: kotlin.String): HttpResponse<UserTaskProgressItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/student/tasks/{taskId}/progress".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param taskId 
     * @param updateTaskProgressRequest 
     * @return UserTaskProgressItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTasksTaskIdProgressPatch(taskId: kotlin.String, updateTaskProgressRequest: UpdateTaskProgressRequest): HttpResponse<UserTaskProgressItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateTaskProgressRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/student/tasks/{taskId}/progress".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param taskId 
     * @return UserTaskProgressItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTasksTaskIdProgressPost(taskId: kotlin.String): HttpResponse<UserTaskProgressItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/student/tasks/{taskId}/progress".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param taskId 
     * @return TaskWithDetails
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTasksTaskIdQueryGet(taskId: kotlin.String): HttpResponse<TaskWithDetails> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/student/tasks/{taskId}/query".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param taskId 
     * @param body 
     * @return Report
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTasksTaskIdReportPost(taskId: kotlin.String, body: kotlin.String): HttpResponse<Report> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = body

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/student/tasks/{taskId}/report".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
