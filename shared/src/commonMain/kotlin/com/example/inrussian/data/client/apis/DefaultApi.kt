/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.example.inrussian.data.client.apis

import com.example.inrussian.data.client.infrastructure.ApiClient
import com.example.inrussian.data.client.infrastructure.HttpResponse
import com.example.inrussian.data.client.infrastructure.RequestConfig
import com.example.inrussian.data.client.infrastructure.RequestMethod
import com.example.inrussian.data.client.infrastructure.map
import com.example.inrussian.data.client.infrastructure.wrap
import com.example.inrussian.data.client.models.PasswordResetRequest
import com.example.inrussian.data.client.models.PasswordResetResponse
import com.example.inrussian.data.client.models.RecoveryCheckRequest
import com.example.inrussian.data.client.models.RecoveryCheckResponse
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.utils.EmptyContent
import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializable
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.json.Json
import kotlinx.serialization.serializer
import org.openapitools.client.models.Badge
import org.openapitools.client.models.CountStats
import org.openapitools.client.models.Course
import org.openapitools.client.models.CourseProgressItem
import org.openapitools.client.models.CreateCourseRequest
import org.openapitools.client.models.CreateReportRequest
import org.openapitools.client.models.CreateSectionRequest
import org.openapitools.client.models.CreateStaffProfileRequest
import org.openapitools.client.models.CreateTaskAnswerOptionRequest
import org.openapitools.client.models.CreateTaskAnswerRequest
import org.openapitools.client.models.CreateTaskContentRequest
import org.openapitools.client.models.CreateTaskQueueRequest
import org.openapitools.client.models.CreateTaskRequest
import org.openapitools.client.models.CreateThemeRequest
import org.openapitools.client.models.CreateUserProfileRequest
import org.openapitools.client.models.LoginRequest
import org.openapitools.client.models.LoginResponse
import org.openapitools.client.models.MediaFileMeta
import org.openapitools.client.models.MessageResponse
import org.openapitools.client.models.OverallCourseStatisticsResponse
import org.openapitools.client.models.RefreshTokenRequest
import org.openapitools.client.models.Report
import org.openapitools.client.models.Section
import org.openapitools.client.models.SectionProgressItem
import org.openapitools.client.models.StaffProfileResponse
import org.openapitools.client.models.StaffRegisterRequest
import org.openapitools.client.models.StudentRegisterRequest
import org.openapitools.client.models.TaskAnswerItem
import org.openapitools.client.models.TaskAnswerOptionItem
import org.openapitools.client.models.TaskContentItem
import org.openapitools.client.models.TaskWithDetails
import org.openapitools.client.models.Theme
import org.openapitools.client.models.UpdateCourseRequest
import org.openapitools.client.models.UpdateSectionRequest
import org.openapitools.client.models.UpdateStaffProfileRequest
import org.openapitools.client.models.UpdateTaskAnswerOptionRequest
import org.openapitools.client.models.UpdateTaskAnswerRequest
import org.openapitools.client.models.UpdateTaskContentRequest
import org.openapitools.client.models.UpdateTaskProgressRequest
import org.openapitools.client.models.UpdateTaskRequest
import org.openapitools.client.models.UpdateThemeRequest
import org.openapitools.client.models.UpdateUserProfileRequest
import org.openapitools.client.models.UpdateUserRequest
import org.openapitools.client.models.User
import org.openapitools.client.models.UserCourseEnrollmentItem
import org.openapitools.client.models.UserInfoResponse
import org.openapitools.client.models.UserLanguageSkillRequest
import org.openapitools.client.models.UserProfileResponse
import org.openapitools.client.models.UserTaskProgressItem
import org.openapitools.client.models.UserTaskQueueItem

open class DefaultApi : ApiClient {
    constructor(
        baseUrl: String = BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = JSON_DEFAULT
    ) : super(
        baseUrl = baseUrl,
        httpClientEngine = httpClientEngine,
        httpClientConfig = httpClientConfig,
        jsonBlock = jsonSerializer
    )

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ) : super(baseUrl = baseUrl, httpClient = httpClient)


    @Suppress("UNCHECKED_CAST")
    open suspend fun adminStatisticsCourseCourseIdGet(courseId: String): HttpResponse<OverallCourseStatisticsResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/admin/statistics/course/{courseId}".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    open suspend fun authLoginPost(loginRequest: LoginRequest): HttpResponse<LoginResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = loginRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/auth/login",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    open suspend fun authLogoutPost(): HttpResponse<MessageResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/auth/logout",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    open suspend fun authMeGet(): HttpResponse<UserInfoResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/auth/me",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    open suspend fun authRefreshPost(refreshTokenRequest: RefreshTokenRequest): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = refreshTokenRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/auth/refresh",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    open suspend fun recoveryReset(passwordResetRequest: PasswordResetRequest): HttpResponse<PasswordResetResponse> {
        val localVariableAuthNames = listOf<String>()

        val localVariableBody = passwordResetRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/password/recovery/reset",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    open suspend fun recoveryCheck(recoveryCheckRequest: RecoveryCheckRequest): HttpResponse<RecoveryCheckResponse> {
        val localVariableAuthNames = listOf<String>()

        val localVariableBody = recoveryCheckRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/password/recovery/check",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    open suspend fun recoveryRequest(email: String): HttpResponse<Pair<String, Boolean>> {
        val localVariableAuthNames = listOf<String>()

        val localVariableBody = email

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/password/recovery/request",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    open suspend fun authStaffRegisterPost(staffRegisterRequest: StaffRegisterRequest): HttpResponse<LoginResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = staffRegisterRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/auth/staff/register",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    open suspend fun authStudentRegisterPost(studentRegisterRequest: StudentRegisterRequest): HttpResponse<LoginResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = studentRegisterRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/auth/student/register",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param courseId
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentCoursesCourseIdDelete(courseId: String): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.DELETE,
            "/content/courses/{courseId}".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param courseId
     * @return Course
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentCoursesCourseIdGet(courseId: String): HttpResponse<Course> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/content/courses/{courseId}".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param courseId
     * @param updateCourseRequest
     * @return Course
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentCoursesCourseIdPut(
        courseId: String,
        updateCourseRequest: UpdateCourseRequest
    ): HttpResponse<Course> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateCourseRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.PUT,
            "/content/courses/{courseId}".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @return kotlin.collections.List<Course>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentCoursesGet(): HttpResponse<List<Course>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/content/courses",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ContentCoursesGetResponse>().map { value }
    }

    @Serializable(ContentCoursesGetResponse.Companion::class)
    private class ContentCoursesGetResponse(val value: List<Course>) {
        companion object : KSerializer<ContentCoursesGetResponse> {
            private val serializer: KSerializer<List<Course>> = serializer<List<Course>>()
            override val descriptor =
                DefaultApi.ContentCoursesGetResponse.Companion.serializer.descriptor

            override fun serialize(encoder: Encoder, value: ContentCoursesGetResponse) =
                DefaultApi.ContentCoursesGetResponse.Companion.serializer.serialize(
                    encoder,
                    value.value
                )

            override fun deserialize(decoder: Decoder) = ContentCoursesGetResponse(
                DefaultApi.ContentCoursesGetResponse.Companion.serializer.deserialize(decoder)
            )
        }
    }

    /**
     *
     *
     * @param createCourseRequest
     * @return Course
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentCoursesPost(createCourseRequest: CreateCourseRequest): HttpResponse<Course> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createCourseRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/content/courses",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @return kotlin.collections.List<Report>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentReportsGet(): HttpResponse<List<Report>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/content/reports",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ContentReportsGetResponse>().map { value }
    }

    @Serializable(ContentReportsGetResponse.Companion::class)
    private class ContentReportsGetResponse(val value: List<Report>) {
        companion object : KSerializer<ContentReportsGetResponse> {
            private val serializer: KSerializer<List<Report>> = serializer<List<Report>>()
            override val descriptor =
                DefaultApi.ContentReportsGetResponse.Companion.serializer.descriptor

            override fun serialize(encoder: Encoder, value: ContentReportsGetResponse) =
                DefaultApi.ContentReportsGetResponse.Companion.serializer.serialize(
                    encoder,
                    value.value
                )

            override fun deserialize(decoder: Decoder) = ContentReportsGetResponse(
                DefaultApi.ContentReportsGetResponse.Companion.serializer.deserialize(decoder)
            )
        }
    }

    /**
     *
     *
     * @param createReportRequest
     * @return Report
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentReportsPost(createReportRequest: CreateReportRequest): HttpResponse<Report> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createReportRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/content/reports",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param reportId
     * @return Report
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentReportsReportIdGet(reportId: String): HttpResponse<Report> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/content/reports/{reportId}".replace("{" + "reportId" + "}", "$reportId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param courseId
     * @return kotlin.collections.List<Section>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentSectionsByCourseCourseIdGet(courseId: String): HttpResponse<List<Section>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/content/sections/by-course/{courseId}".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ContentSectionsByCourseCourseIdGetResponse>().map { value }
    }

    @Serializable(ContentSectionsByCourseCourseIdGetResponse.Companion::class)
    private class ContentSectionsByCourseCourseIdGetResponse(val value: List<Section>) {
        companion object : KSerializer<ContentSectionsByCourseCourseIdGetResponse> {
            private val serializer: KSerializer<List<Section>> = serializer<List<Section>>()
            override val descriptor =
                DefaultApi.ContentSectionsByCourseCourseIdGetResponse.Companion.serializer.descriptor

            override fun serialize(
                encoder: Encoder,
                value: ContentSectionsByCourseCourseIdGetResponse
            ) =
                DefaultApi.ContentSectionsByCourseCourseIdGetResponse.Companion.serializer.serialize(
                    encoder,
                    value.value
                )

            override fun deserialize(decoder: Decoder) = ContentSectionsByCourseCourseIdGetResponse(
                DefaultApi.ContentSectionsByCourseCourseIdGetResponse.Companion.serializer.deserialize(
                    decoder
                )
            )
        }
    }

    /**
     *
     *
     * @param createSectionRequest
     * @return Section
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentSectionsPost(createSectionRequest: CreateSectionRequest): HttpResponse<Section> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createSectionRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/content/sections",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param sectionId
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentSectionsSectionIdDelete(sectionId: String): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.DELETE,
            "/content/sections/{sectionId}".replace("{" + "sectionId" + "}", "$sectionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param sectionId
     * @return Section
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentSectionsSectionIdGet(sectionId: String): HttpResponse<Section> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/content/sections/{sectionId}".replace("{" + "sectionId" + "}", "$sectionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param sectionId
     * @param updateSectionRequest
     * @return Section
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentSectionsSectionIdPut(
        sectionId: String,
        updateSectionRequest: UpdateSectionRequest
    ): HttpResponse<Section> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateSectionRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.PUT,
            "/content/sections/{sectionId}".replace("{" + "sectionId" + "}", "$sectionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param courseId
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentStatsCourseCourseIdTasksCountGet(courseId: String): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/content/stats/course/{courseId}/tasks-count".replace(
                "{" + "courseId" + "}",
                "$courseId"
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @return CountStats
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentStatsGet(): HttpResponse<CountStats> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/content/stats",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param sectionId
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentStatsSectionSectionIdTasksCountGet(sectionId: String): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/content/stats/section/{sectionId}/tasks-count".replace(
                "{" + "sectionId" + "}",
                "$sectionId"
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param themeId
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentStatsThemeThemeIdTasksCountGet(themeId: String): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/content/stats/theme/{themeId}/tasks-count".replace("{" + "themeId" + "}", "$themeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param createTaskRequest
     * @return TaskWithDetails
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksPost(createTaskRequest: CreateTaskRequest): HttpResponse<TaskWithDetails> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createTaskRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/content/tasks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param taskId
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdAnswerDelete(taskId: String): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.DELETE,
            "/content/tasks/{taskId}/answer".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param taskId
     * @return TaskAnswerItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdAnswerGet(taskId: String): HttpResponse<TaskAnswerItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/content/tasks/{taskId}/answer".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param taskId
     * @param createTaskAnswerRequest
     * @return TaskAnswerItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdAnswerPost(
        taskId: String,
        createTaskAnswerRequest: CreateTaskAnswerRequest
    ): HttpResponse<TaskAnswerItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createTaskAnswerRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/content/tasks/{taskId}/answer".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param taskId
     * @param updateTaskAnswerRequest
     * @return TaskAnswerItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdAnswerPut(
        taskId: String,
        updateTaskAnswerRequest: UpdateTaskAnswerRequest
    ): HttpResponse<TaskAnswerItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateTaskAnswerRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.PUT,
            "/content/tasks/{taskId}/answer".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param contentId
     * @param taskId
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdContentContentIdDelete(
        contentId: String,
        taskId: String
    ): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.DELETE,
            "/content/tasks/{taskId}/content/{contentId}".replace(
                "{" + "contentId" + "}",
                "$contentId"
            ).replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param contentId
     * @param taskId
     * @return TaskContentItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdContentContentIdGet(
        contentId: String,
        taskId: String
    ): HttpResponse<TaskContentItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/content/tasks/{taskId}/content/{contentId}".replace(
                "{" + "contentId" + "}",
                "$contentId"
            ).replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param contentId
     * @param taskId
     * @param updateTaskContentRequest
     * @return TaskContentItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdContentContentIdPut(
        contentId: String,
        taskId: String,
        updateTaskContentRequest: UpdateTaskContentRequest
    ): HttpResponse<TaskContentItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateTaskContentRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.PUT,
            "/content/tasks/{taskId}/content/{contentId}".replace(
                "{" + "contentId" + "}",
                "$contentId"
            ).replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param taskId
     * @param createTaskContentRequest
     * @return TaskContentItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdContentPost(
        taskId: String,
        createTaskContentRequest: CreateTaskContentRequest
    ): HttpResponse<TaskContentItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createTaskContentRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/content/tasks/{taskId}/content".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param taskId
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdDelete(taskId: String): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.DELETE,
            "/content/tasks/{taskId}".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     * TODO(\&quot;fix authenticate for &#x60;content-jwt&#x60;\&quot;)
     * @param taskId
     * @return TaskWithDetails
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdGet(taskId: String): HttpResponse<TaskWithDetails> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/content/tasks/{taskId}".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param optionId
     * @param taskId
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdOptionsOptionIdDelete(
        optionId: String,
        taskId: String
    ): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.DELETE,
            "/content/tasks/{taskId}/options/{optionId}".replace(
                "{" + "optionId" + "}",
                "$optionId"
            ).replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param optionId
     * @param taskId
     * @return TaskAnswerOptionItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdOptionsOptionIdGet(
        optionId: String,
        taskId: String
    ): HttpResponse<TaskAnswerOptionItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/content/tasks/{taskId}/options/{optionId}".replace(
                "{" + "optionId" + "}",
                "$optionId"
            ).replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param optionId
     * @param taskId
     * @param updateTaskAnswerOptionRequest
     * @return TaskAnswerOptionItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdOptionsOptionIdPut(
        optionId: String,
        taskId: String,
        updateTaskAnswerOptionRequest: UpdateTaskAnswerOptionRequest
    ): HttpResponse<TaskAnswerOptionItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateTaskAnswerOptionRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.PUT,
            "/content/tasks/{taskId}/options/{optionId}".replace(
                "{" + "optionId" + "}",
                "$optionId"
            ).replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param taskId
     * @param createTaskAnswerOptionRequest
     * @return TaskAnswerOptionItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdOptionsPost(
        taskId: String,
        createTaskAnswerOptionRequest: CreateTaskAnswerOptionRequest
    ): HttpResponse<TaskAnswerOptionItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createTaskAnswerOptionRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/content/tasks/{taskId}/options".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param taskId
     * @param updateTaskRequest
     * @return TaskWithDetails
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentTasksTaskIdPut(
        taskId: String,
        updateTaskRequest: UpdateTaskRequest
    ): HttpResponse<TaskWithDetails> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateTaskRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.PUT,
            "/content/tasks/{taskId}".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param sectionId
     * @return kotlin.collections.List<Theme>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentThemesBySectionSectionIdGet(sectionId: String): HttpResponse<List<Theme>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/content/themes/by-section/{sectionId}".replace("{" + "sectionId" + "}", "$sectionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ContentThemesBySectionSectionIdGetResponse>().map { value }
    }

    @Serializable(ContentThemesBySectionSectionIdGetResponse.Companion::class)
    private class ContentThemesBySectionSectionIdGetResponse(val value: List<Theme>) {
        companion object : KSerializer<ContentThemesBySectionSectionIdGetResponse> {
            private val serializer: KSerializer<List<Theme>> = serializer<List<Theme>>()
            override val descriptor =
                DefaultApi.ContentThemesBySectionSectionIdGetResponse.Companion.serializer.descriptor

            override fun serialize(
                encoder: Encoder,
                value: ContentThemesBySectionSectionIdGetResponse
            ) =
                DefaultApi.ContentThemesBySectionSectionIdGetResponse.Companion.serializer.serialize(
                    encoder,
                    value.value
                )

            override fun deserialize(decoder: Decoder) = ContentThemesBySectionSectionIdGetResponse(
                DefaultApi.ContentThemesBySectionSectionIdGetResponse.Companion.serializer.deserialize(
                    decoder
                )
            )
        }
    }

    /**
     *
     *
     * @param createThemeRequest
     * @return Theme
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentThemesPost(createThemeRequest: CreateThemeRequest): HttpResponse<Theme> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createThemeRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/content/themes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param themeId
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentThemesThemeIdDelete(themeId: String): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.DELETE,
            "/content/themes/{themeId}".replace("{" + "themeId" + "}", "$themeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param themeId
     * @return Theme
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentThemesThemeIdGet(themeId: String): HttpResponse<Theme> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/content/themes/{themeId}".replace("{" + "themeId" + "}", "$themeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param themeId
     * @param updateThemeRequest
     * @return Theme
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentThemesThemeIdPut(
        themeId: String,
        updateThemeRequest: UpdateThemeRequest
    ): HttpResponse<Theme> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateThemeRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.PUT,
            "/content/themes/{themeId}".replace("{" + "themeId" + "}", "$themeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param themeId
     * @return kotlin.collections.List<TaskWithDetails>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun contentThemesThemeIdTasksGet(themeId: String): HttpResponse<List<TaskWithDetails>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/content/themes/{themeId}/tasks".replace("{" + "themeId" + "}", "$themeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ContentThemesThemeIdTasksGetResponse>().map { value }
    }

    @Serializable(ContentThemesThemeIdTasksGetResponse.Companion::class)
    private class ContentThemesThemeIdTasksGetResponse(val value: List<TaskWithDetails>) {
        companion object : KSerializer<ContentThemesThemeIdTasksGetResponse> {
            private val serializer: KSerializer<List<TaskWithDetails>> =
                serializer<List<TaskWithDetails>>()
            override val descriptor =
                DefaultApi.ContentThemesThemeIdTasksGetResponse.Companion.serializer.descriptor

            override fun serialize(encoder: Encoder, value: ContentThemesThemeIdTasksGetResponse) =
                DefaultApi.ContentThemesThemeIdTasksGetResponse.Companion.serializer.serialize(
                    encoder,
                    value.value
                )

            override fun deserialize(decoder: Decoder) = ContentThemesThemeIdTasksGetResponse(
                DefaultApi.ContentThemesThemeIdTasksGetResponse.Companion.serializer.deserialize(
                    decoder
                )
            )
        }
    }

    /**
     *
     *
     * @param courseId
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun expertStatisticsCourseCourseIdAverageProgressGet(courseId: String): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/expert/statistics/course/{courseId}/average-progress".replace(
                "{" + "courseId" + "}",
                "$courseId"
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param courseId
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun expertStatisticsCourseCourseIdAverageTimeGet(courseId: String): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/expert/statistics/course/{courseId}/average-time".replace(
                "{" + "courseId" + "}",
                "$courseId"
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param courseId
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun expertStatisticsCourseCourseIdStudentsCountGet(courseId: String): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/expert/statistics/course/{courseId}/students-count".replace(
                "{" + "courseId" + "}",
                "$courseId"
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun expertStatisticsOverallAverageProgressGet(): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/expert/statistics/overall-average-progress",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun expertStatisticsOverallAverageTimeGet(): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/expert/statistics/overall-average-time",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun expertStatisticsStudentsOverallGet(): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/expert/statistics/students/overall",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param createdFrom  (optional)
     * @param createdTo  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun expertStudentsCountGet(
        createdFrom: String? = null,
        createdTo: String? = null
    ): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        createdFrom?.apply { localVariableQuery["createdFrom"] = listOf("$createdFrom") }
        createdTo?.apply { localVariableQuery["createdTo"] = listOf("$createdTo") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/expert/students/count",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param page  (optional)
     * @param size  (optional)
     * @param sortBy  (optional)
     * @param sortOrder  (optional)
     * @param createdFrom  (optional)
     * @param createdTo  (optional)
     * @return kotlin.collections.List<User>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun expertStudentsGet(
        page: Int? = null,
        size: Int? = null,
        sortBy: String? = null,
        sortOrder: String? = null,
        createdFrom: String? = null,
        createdTo: String? = null
    ): HttpResponse<List<User>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        size?.apply { localVariableQuery["size"] = listOf("$size") }
        sortBy?.apply { localVariableQuery["sortBy"] = listOf("$sortBy") }
        sortOrder?.apply { localVariableQuery["sortOrder"] = listOf("$sortOrder") }
        createdFrom?.apply { localVariableQuery["createdFrom"] = listOf("$createdFrom") }
        createdTo?.apply { localVariableQuery["createdTo"] = listOf("$createdTo") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/expert/students",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ExpertStudentsGetResponse>().map { value }
    }

    @Serializable(ExpertStudentsGetResponse.Companion::class)
    private class ExpertStudentsGetResponse(val value: List<User>) {
        companion object : KSerializer<ExpertStudentsGetResponse> {
            private val serializer: KSerializer<List<User>> = serializer<List<User>>()
            override val descriptor =
                DefaultApi.ExpertStudentsGetResponse.Companion.serializer.descriptor

            override fun serialize(encoder: Encoder, value: ExpertStudentsGetResponse) =
                DefaultApi.ExpertStudentsGetResponse.Companion.serializer.serialize(
                    encoder,
                    value.value
                )

            override fun deserialize(decoder: Decoder) = ExpertStudentsGetResponse(
                DefaultApi.ExpertStudentsGetResponse.Companion.serializer.deserialize(decoder)
            )
        }
    }

    /**
     *
     *
     * @param mediaId
     * @param userId  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun mediaMediaIdDelete(
        mediaId: String,
        userId: String? = null
    ): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        userId?.apply { localVariableQuery["userId"] = listOf("$userId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.DELETE,
            "/media/{mediaId}".replace("{" + "mediaId" + "}", "$mediaId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param mediaId
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun mediaMediaIdGet(mediaId: String): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/media/{mediaId}".replace("{" + "mediaId" + "}", "$mediaId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param mediaId
     * @param userId  (optional)
     * @return MediaFileMeta
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun mediaMediaIdPut(
        mediaId: String,
        userId: String? = null
    ): HttpResponse<MediaFileMeta> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        userId?.apply { localVariableQuery["userId"] = listOf("$userId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.PUT,
            "/media/{mediaId}".replace("{" + "mediaId" + "}", "$mediaId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param userId  (optional)
     * @return MediaFileMeta
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun mediaUploadPost(userId: String? = null): HttpResponse<MediaFileMeta> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        userId?.apply { localVariableQuery["userId"] = listOf("$userId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/media/upload",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param userId
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesAvatarUserIdGet(userId: String): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/profiles/avatar/{userId}".replace("{" + "userId" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @return StaffProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesStaffGet(): HttpResponse<StaffProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/profiles/staff",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param id
     * @return StaffProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesStaffIdGet(id: String): HttpResponse<StaffProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/profiles/staff/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param id
     * @param updateStaffProfileRequest
     * @return StaffProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesStaffIdPut(
        id: String,
        updateStaffProfileRequest: UpdateStaffProfileRequest
    ): HttpResponse<StaffProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateStaffProfileRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.PUT,
            "/profiles/staff/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param createStaffProfileRequest
     * @param targetUserId  (optional)
     * @return StaffProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesStaffPost(
        createStaffProfileRequest: CreateStaffProfileRequest,
        targetUserId: String? = null
    ): HttpResponse<StaffProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createStaffProfileRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        targetUserId?.apply { localVariableQuery["targetUserId"] = listOf("$targetUserId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/profiles/staff",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param updateStaffProfileRequest
     * @return StaffProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesStaffPut(updateStaffProfileRequest: UpdateStaffProfileRequest): HttpResponse<StaffProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateStaffProfileRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.PUT,
            "/profiles/staff",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param updateUserRequest
     * @param targetUserId  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserBasePut(
        updateUserRequest: UpdateUserRequest,
        targetUserId: String? = null
    ): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateUserRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        targetUserId?.apply { localVariableQuery["targetUserId"] = listOf("$targetUserId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.PUT,
            "/profiles/user/base",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @return UserProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserGet(): HttpResponse<UserProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/profiles/user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param id
     * @return UserProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserIdGet(id: String): HttpResponse<UserProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/profiles/user/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param id
     * @param updateUserProfileRequest
     * @return UserProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserIdPut(
        id: String,
        updateUserProfileRequest: UpdateUserProfileRequest
    ): HttpResponse<UserProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateUserProfileRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.PUT,
            "/profiles/user/{id}".replace("{" + "id" + "}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param targetUserId  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserLanguageSkillsGet(targetUserId: String? = null): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        targetUserId?.apply { localVariableQuery["targetUserId"] = listOf("$targetUserId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/profiles/user/language-skills",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param userLanguageSkillRequest
     * @param targetUserId  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserLanguageSkillsPost(
        userLanguageSkillRequest: UserLanguageSkillRequest,
        targetUserId: String? = null
    ): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = userLanguageSkillRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        targetUserId?.apply { localVariableQuery["targetUserId"] = listOf("$targetUserId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/profiles/user/language-skills",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param skillId
     * @param targetUserId  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserLanguageSkillsSkillIdDelete(
        skillId: String,
        targetUserId: String? = null
    ): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        targetUserId?.apply { localVariableQuery["targetUserId"] = listOf("$targetUserId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.DELETE,
            "/profiles/user/language-skills/{skillId}".replace("{" + "skillId" + "}", "$skillId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param skillId
     * @param userLanguageSkillRequest
     * @param targetUserId  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserLanguageSkillsSkillIdPut(
        skillId: String,
        userLanguageSkillRequest: UserLanguageSkillRequest,
        targetUserId: String? = null
    ): HttpResponse<String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = userLanguageSkillRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        targetUserId?.apply { localVariableQuery["targetUserId"] = listOf("$targetUserId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.PUT,
            "/profiles/user/language-skills/{skillId}".replace("{" + "skillId" + "}", "$skillId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param createUserProfileRequest
     * @param targetUserId  (optional)
     * @return UserProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserPost(
        createUserProfileRequest: CreateUserProfileRequest,
        targetUserId: String? = null
    ): HttpResponse<UserProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createUserProfileRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        targetUserId?.apply { localVariableQuery["targetUserId"] = listOf("$targetUserId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/profiles/user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param updateUserProfileRequest
     * @return UserProfileResponse
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun profilesUserPut(updateUserProfileRequest: UpdateUserProfileRequest): HttpResponse<UserProfileResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateUserProfileRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.PUT,
            "/profiles/user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @return kotlin.collections.List<Badge>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentBadgesGet(): HttpResponse<List<Badge>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/student/badges",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<StudentBadgesGetResponse>().map { value }
    }

    @Serializable(StudentBadgesGetResponse.Companion::class)
    private class StudentBadgesGetResponse(val value: List<Badge>) {
        companion object : KSerializer<StudentBadgesGetResponse> {
            private val serializer: KSerializer<List<Badge>> = serializer<List<Badge>>()
            override val descriptor =
                DefaultApi.StudentBadgesGetResponse.Companion.serializer.descriptor

            override fun serialize(encoder: Encoder, value: StudentBadgesGetResponse) =
                DefaultApi.StudentBadgesGetResponse.Companion.serializer.serialize(
                    encoder,
                    value.value
                )

            override fun deserialize(decoder: Decoder) = StudentBadgesGetResponse(
                DefaultApi.StudentBadgesGetResponse.Companion.serializer.deserialize(decoder)
            )
        }
    }

    /**
     *
     *
     * @param body
     * @return kotlin.Boolean
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentBadgesPost(body: String): HttpResponse<Boolean> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = body

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/student/badges",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param courseId
     * @return kotlin.Boolean
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentCoursesCourseIdEnrollDelete(courseId: String): HttpResponse<Boolean> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.DELETE,
            "/student/courses/{courseId}/enroll".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param courseId
     * @return kotlin.Boolean
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentCoursesCourseIdEnrollPost(courseId: String): HttpResponse<Boolean> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/student/courses/{courseId}/enroll".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param courseId
     * @return CourseProgressItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentCoursesCourseIdProgressGet(courseId: String): HttpResponse<CourseProgressItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/student/courses/{courseId}/progress".replace("{" + "courseId" + "}", "$courseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @return kotlin.collections.List<Course>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentCoursesGet(): HttpResponse<List<Course>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/student/courses",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<StudentCoursesGetResponse>().map { value }
    }

    @Serializable(StudentCoursesGetResponse.Companion::class)
    private class StudentCoursesGetResponse(val value: List<Course>) {
        companion object : KSerializer<StudentCoursesGetResponse> {
            private val serializer: KSerializer<List<Course>> = serializer<List<Course>>()
            override val descriptor =
                DefaultApi.StudentCoursesGetResponse.Companion.serializer.descriptor

            override fun serialize(encoder: Encoder, value: StudentCoursesGetResponse) =
                DefaultApi.StudentCoursesGetResponse.Companion.serializer.serialize(
                    encoder,
                    value.value
                )

            override fun deserialize(decoder: Decoder) = StudentCoursesGetResponse(
                DefaultApi.StudentCoursesGetResponse.Companion.serializer.deserialize(decoder)
            )
        }
    }

    /**
     *
     *
     * @return kotlin.collections.List<UserCourseEnrollmentItem>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentEnrollmentsGet(): HttpResponse<List<UserCourseEnrollmentItem>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/student/enrollments",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<StudentEnrollmentsGetResponse>().map { value }
    }

    @Serializable(StudentEnrollmentsGetResponse.Companion::class)
    private class StudentEnrollmentsGetResponse(val value: List<UserCourseEnrollmentItem>) {
        companion object : KSerializer<StudentEnrollmentsGetResponse> {
            private val serializer: KSerializer<List<UserCourseEnrollmentItem>> =
                serializer<List<UserCourseEnrollmentItem>>()
            override val descriptor =
                DefaultApi.StudentEnrollmentsGetResponse.Companion.serializer.descriptor

            override fun serialize(encoder: Encoder, value: StudentEnrollmentsGetResponse) =
                DefaultApi.StudentEnrollmentsGetResponse.Companion.serializer.serialize(
                    encoder,
                    value.value
                )

            override fun deserialize(decoder: Decoder) = StudentEnrollmentsGetResponse(
                DefaultApi.StudentEnrollmentsGetResponse.Companion.serializer.deserialize(decoder)
            )
        }
    }

    /**
     *
     *
     * @param sectionId
     * @return SectionProgressItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentSectionsSectionIdProgressGet(sectionId: String): HttpResponse<SectionProgressItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/student/sections/{sectionId}/progress".replace("{" + "sectionId" + "}", "$sectionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @return kotlin.collections.List<UserTaskQueueItem>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTaskQueueGet(): HttpResponse<List<UserTaskQueueItem>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/student/task-queue",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<StudentTaskQueueGetResponse>().map { value }
    }

    @Serializable(StudentTaskQueueGetResponse.Companion::class)
    private class StudentTaskQueueGetResponse(val value: List<UserTaskQueueItem>) {
        companion object : KSerializer<StudentTaskQueueGetResponse> {
            private val serializer: KSerializer<List<UserTaskQueueItem>> =
                serializer<List<UserTaskQueueItem>>()
            override val descriptor =
                DefaultApi.StudentTaskQueueGetResponse.Companion.serializer.descriptor

            override fun serialize(encoder: Encoder, value: StudentTaskQueueGetResponse) =
                DefaultApi.StudentTaskQueueGetResponse.Companion.serializer.serialize(
                    encoder,
                    value.value
                )

            override fun deserialize(decoder: Decoder) = StudentTaskQueueGetResponse(
                DefaultApi.StudentTaskQueueGetResponse.Companion.serializer.deserialize(decoder)
            )
        }
    }

    /**
     *
     *
     * @return UserTaskQueueItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTaskQueueNextGet(): HttpResponse<UserTaskQueueItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/student/task-queue/next",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param createTaskQueueRequest
     * @return UserTaskQueueItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTaskQueuePost(createTaskQueueRequest: CreateTaskQueueRequest): HttpResponse<UserTaskQueueItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = createTaskQueueRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/student/task-queue",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param queueId
     * @return kotlin.Boolean
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTaskQueueQueueIdDelete(queueId: String): HttpResponse<Boolean> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.DELETE,
            "/student/task-queue/{queueId}".replace("{" + "queueId" + "}", "$queueId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param queueId
     * @param body
     * @return kotlin.Boolean
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTaskQueueQueueIdPositionPatch(
        queueId: String,
        body: String
    ): HttpResponse<Boolean> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = body

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.PATCH,
            "/student/task-queue/{queueId}/position".replace("{" + "queueId" + "}", "$queueId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param taskId
     * @return TaskAnswerItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTasksTaskIdAnswerGet(taskId: String): HttpResponse<TaskAnswerItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/student/tasks/{taskId}/answer".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param taskId
     * @param body
     * @return UserTaskProgressItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTasksTaskIdCompletePost(
        taskId: String,
        body: String
    ): HttpResponse<UserTaskProgressItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = body

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/student/tasks/{taskId}/complete".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param taskId
     * @return UserTaskProgressItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTasksTaskIdProgressGet(taskId: String): HttpResponse<UserTaskProgressItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/student/tasks/{taskId}/progress".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param taskId
     * @param updateTaskProgressRequest
     * @return UserTaskProgressItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTasksTaskIdProgressPatch(
        taskId: String,
        updateTaskProgressRequest: UpdateTaskProgressRequest
    ): HttpResponse<UserTaskProgressItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = updateTaskProgressRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.PATCH,
            "/student/tasks/{taskId}/progress".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param taskId
     * @return UserTaskProgressItem
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTasksTaskIdProgressPost(taskId: String): HttpResponse<UserTaskProgressItem> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/student/tasks/{taskId}/progress".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param taskId
     * @return TaskWithDetails
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTasksTaskIdQueryGet(taskId: String): HttpResponse<TaskWithDetails> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.GET,
            "/student/tasks/{taskId}/query".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     *
     *
     * @param taskId
     * @param body
     * @return Report
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun studentTasksTaskIdReportPost(
        taskId: String,
        body: String
    ): HttpResponse<Report> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = body

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<Any?>(
            RequestMethod.POST,
            "/student/tasks/{taskId}/report".replace("{" + "taskId" + "}", "$taskId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}